Memory Layout for C:

Address: High Command Line & Environment Variables
Stack

                        Heap

                        Data Segment (global and static variables):
                                                 BSS (Uninitialized Segment, would be initialized to 0 by loader)

                                                 Initialized Segment (includes read only constant strings)

                        Text Segment (binary code)
Static & Extern
Static is used before local, global variables and functions to make them only visible in the same source file. static local
variable also stores in data segments other than stack and life cycle is longer than function. Extern declare the variable
is defined in another compile unit. function is by default decorated by extern;

inline & define
inline function tells the compiler to replace the function body with function calling other than switching context to save
statck. inline is similar to normal function calling, it will check the parameters and easy 
to debug. While macro does not check parameters and is potential unsafe, unable to debug. Thus, not recommend to define
complex functions.

Volatile
in C, this keyword tells compiler that the variable could be modified by other threads anytime, do not optimize its access
(e.g save it in cache or register). Volatile has similar function in Java, however it does not guarantee atom operations,
You should use synchronized keyword.

attribute 
attribute((function/variable/type)) 放在函数申明的分号；之前，让编译器检查优化函数。
例如add(int a, int b)attribute((const)) 多次调用同一参数时会优化只调用一次。
int a__attribute__((aligned 8)) = 10; 8字节对齐分配

Function Pointers
int (pointer_name) (int a, int b); a pointer point to function address just like variable or array.
int (test) (int a, int b) = add;
test (2, 3) is equal to add(2, 3);
typedef int (myfunc) (int, int) is define a type myfunc as int () (int, int)
myfunc f = func1; use it as f(2, 3) = func1(2, 3)


Virtual Function
virtual function is used in C++ to implement polymorphism. When a class clarify virtual functions or inherate from parent
class, the compiler assign virtual table (vtable) which is collection of pointers to virtual functions. The class would 
also have a vtable pointer to the virtual table. When the object is to call the function, it looks up the Class it points
to and get the vtable pointer then get the function address from virtual table.
class A{
public:                                      vtptr: point to Array
    virtual func1();                         Array[0]: address of A::func1
    virtual func2();                         Array[1]: address of A::func2
    virtual func3();                         Array[2]: address of A::func3
}
class B : class A{
public:                                      vtptr: point to Array
    virtual func1();                         Array[0]: address of B::func1
    virtual func5();                         Array[1]: address of A::func2
}                                            Array[2]: address of A::func3
                                             Array[3]: address of B::func5

A * a = new B(); a.func1();
When run a.func1(); Though a is type A but it points to Type B, so we get B's vtptr. then it looks up address of func1
in B's vtable.
virtual func() == 0; is called pure virtual function. It makes the class a abstract class which could not be instantiate, and all sub
classes must implements those pure functions, otherwise they are abstract class too.

